#!/bin/bash

# Setup S3 backend for Terraform state with DynamoDB locking
# Fully automated - creates both S3 bucket and DynamoDB table if needed

BUCKET_NAME="text2agent-terraform-state-eu-west-2"
TABLE_NAME="text2agent-terraform-state-lock"
REGION="eu-west-2"
BACKEND_CONFIG_FILE="backend-override.tf"

echo "🚀 Setting up Terraform S3 backend with DynamoDB locking..."
echo "=============================================================="
echo "S3 Bucket: $BUCKET_NAME"
echo "DynamoDB Table: $TABLE_NAME"
echo "Region: $REGION"
echo ""

# =====================================
# STEP 1: Setup S3 Bucket
# =====================================
echo "1️⃣ Setting up S3 bucket for state storage..."

# Check if bucket already exists
if ! aws s3api head-bucket --bucket "$BUCKET_NAME" --region "$REGION" 2>/dev/null; then
    echo "📦 Creating S3 bucket: $BUCKET_NAME"
    
    # Create the bucket
    aws s3api create-bucket \
        --bucket "$BUCKET_NAME" \
        --region "$REGION" \
        --create-bucket-configuration LocationConstraint="$REGION"
    
    if [ $? -eq 0 ]; then
        echo "✅ S3 bucket created successfully"
    else
        echo "❌ Failed to create S3 bucket"
        exit 1
    fi

    # Configure bucket
    aws s3api put-bucket-versioning \
        --bucket "$BUCKET_NAME" \
        --versioning-configuration Status=Enabled

    aws s3api put-bucket-encryption \
        --bucket "$BUCKET_NAME" \
        --server-side-encryption-configuration '{
                "Rules": [{
                    "ApplyServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                    }
                }]
        }'

    aws s3api put-public-access-block \
        --bucket "$BUCKET_NAME" \
        --public-access-block-configuration \
        BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
        
    echo "✅ S3 bucket configured with versioning, encryption, and security"
else
    echo "✅ S3 bucket already exists: $BUCKET_NAME"
fi

# =====================================
# STEP 2: Setup DynamoDB Table
# =====================================
echo ""
echo "2️⃣ Setting up DynamoDB table for state locking..."

# Check if table exists
if aws dynamodb describe-table --table-name "$TABLE_NAME" --region "$REGION" >/dev/null 2>&1; then
    echo "✅ DynamoDB table already exists: $TABLE_NAME"
    
    # Verify table status
    TABLE_STATUS=$(aws dynamodb describe-table --table-name "$TABLE_NAME" --region "$REGION" \
        --query 'Table.TableStatus' --output text)
    echo "   Status: $TABLE_STATUS"
    
    if [ "$TABLE_STATUS" != "ACTIVE" ]; then
        echo "⏳ Waiting for table to become active..."
        aws dynamodb wait table-exists --table-name "$TABLE_NAME" --region "$REGION"
    fi
else
    echo "📊 Creating DynamoDB table: $TABLE_NAME"
    aws dynamodb create-table \
        --table-name "$TABLE_NAME" \
        --attribute-definitions AttributeName=LockID,AttributeType=S \
        --key-schema AttributeName=LockID,KeyType=HASH \
        --billing-mode PAY_PER_REQUEST \
        --region "$REGION" \
        --tags "Key=Project,Value=text2agent" \
               "Key=Environment,Value=production" \
               "Key=Purpose,Value=TerraformStateLocking" \
               "Key=ManagedBy,Value=AutomatedWorkflow" \
        --no-cli-pager

    echo "⏳ Waiting for table to become active..."
    aws dynamodb wait table-exists --table-name "$TABLE_NAME" --region "$REGION"
    echo "✅ DynamoDB table created successfully!"
fi

# =====================================
# STEP 3: Configure Backend with Locking
# =====================================
echo ""
echo "3️⃣ Configuring Terraform backend with locking..."

# Create backend override file with locking enabled
cat > "$BACKEND_CONFIG_FILE" << EOF
# ==============================================================================
# BACKEND OVERRIDE - DynamoDB State Locking
# This file automatically enables DynamoDB locking
# Generated by automated workflow - DO NOT COMMIT TO VERSION CONTROL
# ==============================================================================

terraform {
  backend "s3" {
    bucket         = "$BUCKET_NAME"
    key            = "text2agent/production/terraform.tfstate"
    region         = "$REGION"
    dynamodb_table = "$TABLE_NAME"
    encrypt        = true
  }
}
EOF

echo "✅ Backend configuration updated with DynamoDB locking"

# =====================================
# SUMMARY
# =====================================
echo ""
echo "🎉 Terraform Backend Setup Complete!"
echo "====================================="
echo ""
echo "📋 Configuration Summary:"
echo "   ✅ S3 Bucket: $BUCKET_NAME"
echo "   ✅ DynamoDB Table: $TABLE_NAME"
echo "   ✅ Region: $REGION"
echo "   ✅ State Locking: ENABLED"
echo "   ✅ Encryption: ENABLED"
echo "   💰 DynamoDB Cost: ~\$0.30-0.50/month"
echo ""
echo "🔐 Benefits:"
echo "   - Prevents concurrent Terraform operations"
echo "   - Eliminates state corruption and race conditions"
echo "   - Safe for CI/CD and team collaboration"
echo "   - Automatic conflict resolution"
echo ""
echo "📁 State Location:"
echo "   s3://$BUCKET_NAME/text2agent/production/terraform.tfstate" 