name: Deploy Terraform Infrastructure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: 1.5.7
  AWS_REGION: eu-west-2
  AWS_DEFAULT_REGION: eu-west-2

jobs:
  terraform-check:
    name: 'Terraform Format and Validate'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup S3 Backend
        run: |
          echo "üöÄ Setting up S3 backend for Terraform state..."
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Terraform Init
        run: |
          terraform init

      - name: Terraform Validate
        run: terraform validate

  terraform-plan:
    name: 'Terraform Plan'
    needs: terraform-check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup S3 Backend
        run: |
          echo "üöÄ Setting up S3 backend for Terraform state..."
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Terraform Init
        run: |
          terraform init

      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan -var="aws_region=${{ env.AWS_REGION }}" -var="aws_profile="
          terraform show -no-color tfplan > plan-output.txt

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            terraform/tfplan
            terraform/plan-output.txt
          retention-days: 7

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan-output.txt', 'utf8');
            const maxLength = 65536;
            const truncatedPlan = plan.length > maxLength ? plan.substring(0, maxLength) + '\n...\n(Output truncated)' : plan;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan üèóÔ∏è\n\`\`\`terraform\n${truncatedPlan}\n\`\`\``
            });

  terraform-apply:
    name: 'Terraform Apply'
    needs: [terraform-check, terraform-plan]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/IAC') && (github.event_name == 'push' || github.event.inputs.action == 'apply')
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/

      - name: Setup S3 Backend
        run: |
          echo "üöÄ Setting up S3 backend for Terraform state..."
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Terraform Init
        run: |
          terraform init

      - name: Terraform Apply
        run: |
          echo "üöÄ Applying Terraform configuration..."
          terraform apply -auto-approve tfplan
          echo "‚úÖ Apply completed successfully"

      - name: Generate Outputs
        run: |
          terraform output -json > infrastructure-outputs.json
          echo "## üèóÔ∏è MODULAR Infrastructure Deployed (Lambda + Cognito + S3) üöÄ" >> $GITHUB_STEP_SUMMARY
          echo "### Active Modules:" >> $GITHUB_STEP_SUMMARY
          echo "- **üîê Auth Module**: Cognito User Pool + Lambda triggers" >> $GITHUB_STEP_SUMMARY
          echo "- **üì¶ Storage Module**: S3 bucket with security configurations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resources Created:" >> $GITHUB_STEP_SUMMARY
          echo "- **Post Confirmation Lambda**: $(terraform output -raw post_confirmation_lambda_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Lambda Role**: $(terraform output -raw lambda_role_arn)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cognito User Pool**: $(terraform output -raw cognito_user_pool_id)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cognito Client**: $(terraform output -raw cognito_user_pool_client_id)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cognito Domain**: $(terraform output -raw cognito_user_pool_domain)" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: $(terraform output -raw s3_bucket_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket ARN**: $(terraform output -raw s3_bucket_arn)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Module Status" >> $GITHUB_STEP_SUMMARY
          echo "- **‚úÖ Active**: storage, auth" >> $GITHUB_STEP_SUMMARY
          echo "- **üí§ Disabled**: networking, database, security, ai" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Modular Architecture" >> $GITHUB_STEP_SUMMARY
          echo "Infrastructure is now organized into reusable modules for easy scaling." >> $GITHUB_STEP_SUMMARY

      - name: Upload Infrastructure Outputs
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-outputs
          path: terraform/infrastructure-outputs.json
          retention-days: 30



  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup S3 Backend
        run: |
          echo "üöÄ Setting up S3 backend for Terraform state..."
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Terraform Init
        run: |
          terraform init

      - name: Verify State and Resources
        run: |
          echo "üîç Checking Terraform state and AWS resources..."
          echo "Current state resources:"
          RESOURCES=$(terraform state list)
          if [ -z "$RESOURCES" ]; then
            echo "‚ùå ERROR: No resources found in Terraform state!"
            echo "This could mean:"
            echo "  - Infrastructure was already destroyed"
            echo "  - State file is missing or corrupted"
            echo "  - Wrong backend configuration"
            exit 1
          else
            echo "$RESOURCES"
          fi
          
          echo ""
          echo "Verifying state shows resources to destroy:"
          terraform show || echo "‚ö†Ô∏è No state data"
          
          echo ""
          echo "Planning destroy to see what will be removed:"
          terraform plan -destroy -var="aws_region=${{ env.AWS_REGION }}" -var="aws_profile=" | head -50

      - name: Terraform Destroy
        run: |
          echo "üí• Starting infrastructure destruction..."
          echo "Creating destroy plan..."
          terraform plan -destroy -out=destroy-plan -var="aws_region=${{ env.AWS_REGION }}" -var="aws_profile="
          
          echo ""
          echo "Applying destroy plan..."
          terraform apply -auto-approve destroy-plan
          
          echo ""
          echo "‚úÖ Infrastructure destroyed successfully"

      - name: Verify Destruction
        run: |
          echo "üîç Verifying destruction completed..."
          terraform state list || echo "‚úÖ State is empty - all resources destroyed"
          
          echo ""
          echo "Checking for Lambda functions..."
          aws lambda list-functions --query 'Functions[?starts_with(FunctionName, `text2Agent`)].FunctionName' --output table || echo "No Lambda functions found"
          
          echo ""
          echo "Checking for S3 buckets..."
          aws s3 ls | grep text2agent || echo "No text2agent S3 buckets found"

      - name: Destroy Summary
        run: |
          echo "## üèóÔ∏è MODULAR Infrastructure Destroyed üí•" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ All active module resources have been removed" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Terraform state is clean" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Modules Destroyed:" >> $GITHUB_STEP_SUMMARY
          echo "- **üîê Auth Module**: Cognito User Pool, Lambda function, IAM roles" >> $GITHUB_STEP_SUMMARY
          echo "- **üì¶ Storage Module**: S3 STR Data Store bucket" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Module Status" >> $GITHUB_STEP_SUMMARY
          echo "- **‚ùå Destroyed**: storage, auth" >> $GITHUB_STEP_SUMMARY
          echo "- **üí§ Disabled**: networking, database, security, ai (were not deployed)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Modular Architecture" >> $GITHUB_STEP_SUMMARY
          echo "Infrastructure modules are ready for future deployment when needed." >> $GITHUB_STEP_SUMMARY
          