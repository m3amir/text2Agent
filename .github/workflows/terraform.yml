name: Deploy Terraform Infrastructure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: 1.5.7
  AWS_REGION: eu-west-2
  AWS_DEFAULT_REGION: eu-west-2

jobs:
  build-lambda:
    name: 'Build Lambda Functions'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build psycopg2 Layer
        run: |
          chmod +x ./build_psycopg2_layer.sh
          ./build_psycopg2_layer.sh

      - name: Build Lambda Function Package
        run: |
          rm -rf lambda_build post_confirmation.zip
          mkdir -p lambda_build
          cp lambda_functions/post_confirmation/index.py lambda_build/
          cd lambda_build && zip -r ../post_confirmation.zip .
          rm -rf lambda_build

      - name: Verify Build Artifacts
        run: |
          echo "✅ Verifying Lambda build artifacts..."
          ls -la *.zip

      - name: Upload Lambda Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-packages
          path: |
            terraform/psycopg2-layer.zip
            terraform/post_confirmation.zip
          retention-days: 7

  terraform-check:
    name: 'Terraform Format and Validate'
    needs: build-lambda
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Lambda Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: terraform/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Backend
        run: |
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

  stale-lock-check:
    name: 'Check for Stale Locks'
    needs: terraform-check
    runs-on: ubuntu-latest
    outputs:
      stale_locks_found: ${{ steps.check_locks.outputs.stale_locks_found }}
      active_locks_found: ${{ steps.check_locks.outputs.active_locks_found }}
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Backend
        run: |
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Initialize Terraform Backend
        run: terraform init -reconfigure

      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Check for Stale and Active Locks
        id: check_locks
        continue-on-error: true
        run: |
          chmod +x ./detect_and_handle_locks.sh
          if ./detect_and_handle_locks.sh; then
            echo "✅ Lock check completed - no active locks blocking workflow"
            echo "check_result=success" >> $GITHUB_OUTPUT
          else
            echo "check_result=blocked" >> $GITHUB_OUTPUT
          fi
          echo "stale_locks_found=${STALE_LOCKS_FOUND:-false}" >> $GITHUB_OUTPUT
          echo "active_locks_found=${ACTIVE_LOCKS_FOUND:-false}" >> $GITHUB_OUTPUT

      - name: Handle Active Locks Detected
        if: env.ACTIVE_LOCKS_FOUND == 'true'
        run: |
          echo "## ❌ ACTIVE LOCKS DETECTED - WORKFLOW BLOCKED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Concurrent Operation in Progress" >> $GITHUB_STEP_SUMMARY
          echo "Another Terraform operation is currently running. This workflow has been stopped to prevent conflicts." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Active Lock Details:" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.ACTIVE_LOCK_DETAILS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Wait for the active operation to complete" >> $GITHUB_STEP_SUMMARY
          echo "2. Re-run this workflow after the lock is released" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor the other workflow's progress in the Actions tab" >> $GITHUB_STEP_SUMMARY
          exit 1

      - name: Create Detection Summary
        if: env.ACTIVE_LOCKS_FOUND != 'true'
        run: |
          if [ "${{ env.STALE_LOCKS_FOUND }}" = "true" ]; then
            echo "## ❌ STALE LOCKS DETECTED - APPROVAL REQUIRED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Detection Results:" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: STALE LOCKS FOUND" >> $GITHUB_STEP_SUMMARY
            echo "- **Count**: ${{ env.LOCK_COUNT }} stale lock(s)" >> $GITHUB_STEP_SUMMARY
            echo "- **Action Required**: Manual approval to remove stale locks" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Stale Lock Details:" >> $GITHUB_STEP_SUMMARY
            echo "${{ env.LOCK_DETAILS }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ NO LOCKS DETECTED - ALL CLEAR" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Detection Results:" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ALL CLEAR" >> $GITHUB_STEP_SUMMARY
            echo "- **Stale Locks**: 0" >> $GITHUB_STEP_SUMMARY
            echo "- **Active Locks**: 0" >> $GITHUB_STEP_SUMMARY
            echo "- **Action Required**: None - proceeding automatically" >> $GITHUB_STEP_SUMMARY
          fi

  stale-lock-approval:
    name: 'Approve Stale Lock Removal'
    needs: stale-lock-check
    runs-on: ubuntu-latest
    if: needs.stale-lock-check.outputs.stale_locks_found == 'true' && needs.stale-lock-check.outputs.active_locks_found != 'true'
    environment: 
      name: stale-lock-approval
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Backend
        run: |
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Initialize Terraform Backend
        run: terraform init -reconfigure

      - name: Get Lock Information
        run: |
          chmod +x ./detect_and_handle_locks.sh
          ./detect_and_handle_locks.sh

      - name: Create Approval Summary
        run: |
          echo "## ❌ STALE LOCK APPROVAL REQUIRED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Review Before Approving:" >> $GITHUB_STEP_SUMMARY
          echo "You are being asked to approve the removal of **${{ env.LOCK_COUNT }}** stale lock(s)." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Lock Details to Review:" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.LOCK_DETAILS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Locks to be Unlocked:" >> $GITHUB_STEP_SUMMARY
          echo "\`${{ env.LOCK_IDS }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Safe to Approve If:" >> $GITHUB_STEP_SUMMARY
          echo "- No other Terraform operations are currently running" >> $GITHUB_STEP_SUMMARY
          echo "- The locks are from old/cancelled workflows" >> $GITHUB_STEP_SUMMARY
          echo "- You've verified no active deployments are in progress elsewhere" >> $GITHUB_STEP_SUMMARY

      - name: Unlock Approved Locks
        run: |
          chmod +x ./unlock_approved_locks.sh
          ./unlock_approved_locks.sh

  terraform-plan:
    name: 'Terraform Plan'
    needs: [stale-lock-check, stale-lock-approval]
    if: github.event.inputs.action != 'destroy' && always() && (needs.stale-lock-check.result == 'success') && (needs.stale-lock-check.outputs.active_locks_found != 'true') && (needs.stale-lock-approval.result == 'success' || needs.stale-lock-approval.result == 'skipped')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Lambda Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: terraform/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Backend
        run: |
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="aws_profile="
          terraform show -no-color tfplan > plan-output.txt

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            terraform/tfplan
            terraform/plan-output.txt
          retention-days: 7

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan-output.txt', 'utf8');
            const maxLength = 65536;
            const truncatedPlan = plan.length > maxLength ? plan.substring(0, maxLength) + '\n...\n(Output truncated)' : plan;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan\n\`\`\`terraform\n${truncatedPlan}\n\`\`\``
            });

  terraform-apply:
    name: 'Terraform Apply'
    needs: [terraform-check, terraform-plan, stale-lock-check, stale-lock-approval]
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'destroy' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/IAC') && (github.event_name == 'push' || github.event.inputs.action == 'apply') && always() && (needs.stale-lock-check.result == 'success') && (needs.stale-lock-check.outputs.active_locks_found != 'true') && (needs.stale-lock-approval.result == 'success' || needs.stale-lock-approval.result == 'skipped')
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Lambda Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: terraform/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/

      - name: Setup Backend
        run: |
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Check for Stale Locks
        run: |
          chmod +x ./detect_and_handle_locks.sh
          ./detect_and_handle_locks.sh

      - name: Terraform Init
        run: terraform init

      - name: Backup Current State Before Apply
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BACKUP_KEY="backups/pre-apply-terraform.tfstate.${TIMESTAMP}"
          
          if aws s3api head-object --bucket text2agent-terraform-state-eu-west-2 \
             --key text2agent/production/terraform.tfstate \
             --region ${{ env.AWS_REGION }} 2>/dev/null; then
            
            aws s3 cp s3://text2agent-terraform-state-eu-west-2/text2agent/production/terraform.tfstate \
                      s3://text2agent-terraform-state-eu-west-2/${BACKUP_KEY} \
                      --region ${{ env.AWS_REGION }}
            
            echo "✅ Pre-apply state backed up to: ${BACKUP_KEY}"
            echo "PRE_APPLY_BACKUP_KEY=${BACKUP_KEY}" >> $GITHUB_ENV
          else
            echo "No existing state found - initial deployment"
            echo "PRE_APPLY_BACKUP_KEY=" >> $GITHUB_ENV
          fi

      - name: Terraform Apply
        run: |
          APPLY_OUTPUT_FILE="/tmp/terraform_apply_output.log"
          
          if [ -f "tfplan" ] && terraform apply -auto-approve tfplan 2>&1 | tee "$APPLY_OUTPUT_FILE"; then
            echo "✅ Infrastructure deployment successful"
          else
            if grep -q "Saved plan is stale\|plan was created" "$APPLY_OUTPUT_FILE"; then
              rm -f tfplan
              terraform plan -out=tfplan-fresh \
                -var="aws_region=${{ env.AWS_REGION }}" \
                -var="aws_profile="
              
              if terraform apply -auto-approve tfplan-fresh; then
                echo "✅ Infrastructure deployed successfully with fresh plan"
              else
                echo "❌ Fresh plan apply failed"
                exit 1
              fi
              
            elif [ ! -f "tfplan" ]; then
              terraform plan -out=tfplan-fresh \
                -var="aws_region=${{ env.AWS_REGION }}" \
                -var="aws_profile="
              
              if terraform apply -auto-approve tfplan-fresh; then
                echo "✅ Infrastructure deployed successfully with fresh plan"
              else
                echo "❌ Fresh plan apply failed"
                exit 1
              fi
              
            elif grep -q "ResourceNotFoundException.*DataSource.*is not found" "$APPLY_OUTPUT_FILE"; then
              terraform state rm module.ai.aws_bedrockagent_data_source.s3_documents 2>/dev/null || true
              
              terraform plan -out=tfplan-fixed \
                -var="aws_region=${{ env.AWS_REGION }}" \
                -var="aws_profile="
              
              terraform apply -auto-approve tfplan-fixed
              echo "✅ Infrastructure deployed with Bedrock data source recreated"
              
            else
              echo "❌ Unhandled error encountered:"
              cat "$APPLY_OUTPUT_FILE"
              exit 1
            fi
          fi

      - name: Post-Apply State Backup
        if: success()
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          POST_APPLY_BACKUP_KEY="backups/post-apply-terraform.tfstate.${TIMESTAMP}"
          
          aws s3 cp s3://text2agent-terraform-state-eu-west-2/text2agent/production/terraform.tfstate \
                    s3://text2agent-terraform-state-eu-west-2/${POST_APPLY_BACKUP_KEY} \
                    --region ${{ env.AWS_REGION }}
          
          echo "✅ Post-apply state backed up to: ${POST_APPLY_BACKUP_KEY}"

      - name: Rollback on Failure
        if: failure() && env.PRE_APPLY_BACKUP_KEY != ''
        run: |
          echo "❌ FAILURE DETECTED - Restoring previous state..."
          
          aws s3 cp s3://text2agent-terraform-state-eu-west-2/$PRE_APPLY_BACKUP_KEY \
                    s3://text2agent-terraform-state-eu-west-2/text2agent/production/terraform.tfstate \
                    --region ${{ env.AWS_REGION }}
          
          echo "State restored to pre-apply version"

      - name: Generate Outputs
        run: |
          terraform output -json > infrastructure-outputs.json
          echo "## ✅ text2Agent Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **VPC**: $(terraform output -raw vpc_id)" >> $GITHUB_STEP_SUMMARY
          echo "- **Aurora Cluster**: $(terraform output -raw aurora_cluster_id)" >> $GITHUB_STEP_SUMMARY
          echo "- **Aurora Endpoint**: $(terraform output -raw aurora_cluster_endpoint)" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: $(terraform output -raw s3_bucket_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Bedrock KB ID**: $(terraform output -raw bedrock_knowledge_base_id)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cognito User Pool**: $(terraform output -raw cognito_user_pool_id)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status: ✅ PRODUCTION READY" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $(terraform output -raw environment)" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: $(terraform output -raw aws_region)" >> $GITHUB_STEP_SUMMARY

      - name: Upload Infrastructure Outputs
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-outputs
          path: terraform/infrastructure-outputs.json
          retention-days: 30

  terraform-destroy:
    name: 'Terraform Destroy'
    needs: [stale-lock-check, stale-lock-approval]
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy' && always() && (needs.stale-lock-check.result == 'success') && (needs.stale-lock-check.outputs.active_locks_found != 'true') && (needs.stale-lock-approval.result == 'success' || needs.stale-lock-approval.result == 'skipped')
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Backend
        run: |
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Terraform Init
        run: terraform init

      - name: Verify State and Resources
        run: |
          RESOURCES=$(terraform state list)
          if [ -z "$RESOURCES" ]; then
            echo "❌ ERROR: No resources found in Terraform state!"
            exit 1
          else
            echo "✅ Found $( echo "$RESOURCES" | wc -l ) resources to destroy:"
            echo "$RESOURCES"
          fi

      - name: Terraform Destroy
        run: |
          terraform plan -destroy -out=destroy-plan -var="aws_region=${{ env.AWS_REGION }}" -var="aws_profile="
          terraform apply -auto-approve destroy-plan
          echo "✅ Infrastructure destroyed successfully"

      - name: Verify Destruction
        run: |
          terraform state list || echo "✅ State is empty - all resources destroyed"

      - name: Destroy Summary
        run: |
          echo "## ✅ text2Agent Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "✅ All infrastructure resources have been removed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Terraform state is clean" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Destroyed:" >> $GITHUB_STEP_SUMMARY
          echo "- VPC & Networking" >> $GITHUB_STEP_SUMMARY
          echo "- Aurora PostgreSQL" >> $GITHUB_STEP_SUMMARY
          echo "- Cognito Authentication" >> $GITHUB_STEP_SUMMARY
          echo "- Lambda Functions" >> $GITHUB_STEP_SUMMARY
          echo "- S3 Storage" >> $GITHUB_STEP_SUMMARY
          echo "- Bedrock Knowledge Base" >> $GITHUB_STEP_SUMMARY
          echo "- IAM Resources" >> $GITHUB_STEP_SUMMARY
          