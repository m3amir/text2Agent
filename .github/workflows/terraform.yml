name: Deploy Terraform Infrastructure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: 1.5.7
  AWS_REGION: eu-west-2
  AWS_DEFAULT_REGION: eu-west-2

jobs:
  build-lambda:
    name: 'Build Lambda Functions'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build psycopg2 Layer
        run: |
          echo "🔨 Building psycopg2 Lambda Layer with Docker for Linux compatibility..."
          chmod +x ./build_psycopg2_layer.sh
          ./build_psycopg2_layer.sh

      - name: Build Lambda Function Package
        run: |
          echo "📦 Building Lambda function package (code only)..."
          chmod +x ./build_lambda.sh
          ./build_lambda.sh

      - name: Verify Build Artifacts
        run: |
          echo "✅ Verifying Lambda build artifacts..."
          ls -la *.zip
          echo ""
          echo "📋 psycopg2 layer contents:"
          unzip -l psycopg2-layer.zip | head -10
          echo ""
          echo "📋 Lambda function contents:"
          unzip -l post_confirmation.zip

      - name: Upload Lambda Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-packages
          path: |
            terraform/psycopg2-layer.zip
            terraform/post_confirmation.zip
          retention-days: 7

  terraform-check:
    name: 'Terraform Format and Validate'
    needs: build-lambda
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Lambda Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: terraform/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup S3 Backend
        run: |
          echo "🚀 Setting up S3 backend for Terraform state..."
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Terraform Init
        run: |
          terraform init

      - name: Terraform Validate
        run: terraform validate

  terraform-plan:
    name: 'Terraform Plan'
    needs: terraform-check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Lambda Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: terraform/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup S3 Backend
        run: |
          echo "🚀 Setting up S3 backend for Terraform state..."
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Terraform Init
        run: |
          terraform init

      - name: Backup Current State Before Planning
        run: |
          echo "💾 Creating backup of current Terraform state..."
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BACKUP_KEY="backups/terraform.tfstate.${TIMESTAMP}"
          
          # Check if state file exists in S3
          if aws s3api head-object --bucket text2agent-terraform-state-eu-west-2 \
             --key text2agent/production/terraform.tfstate \
             --region ${{ env.AWS_REGION }} 2>/dev/null; then
            
            echo "📁 Current state found, creating backup..."
            aws s3 cp s3://text2agent-terraform-state-eu-west-2/text2agent/production/terraform.tfstate \
                      s3://text2agent-terraform-state-eu-west-2/${BACKUP_KEY} \
                      --region ${{ env.AWS_REGION }}
            
            echo "✅ State backed up to: s3://text2agent-terraform-state-eu-west-2/${BACKUP_KEY}"
            echo "BACKUP_KEY=${BACKUP_KEY}" >> $GITHUB_ENV
          else
            echo "ℹ️ No existing state found - this appears to be initial deployment"
            echo "BACKUP_KEY=" >> $GITHUB_ENV
          fi

      - name: Terraform Plan
        run: |
          echo "🚀 Planning complete infrastructure deployment..."
          terraform plan -out=tfplan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="aws_profile="
          terraform show -no-color tfplan > plan-output.txt

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            terraform/tfplan
            terraform/plan-output.txt
          retention-days: 7

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan-output.txt', 'utf8');
            const maxLength = 65536;
            const truncatedPlan = plan.length > maxLength ? plan.substring(0, maxLength) + '\n...\n(Output truncated)' : plan;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan 🏗️\n\`\`\`terraform\n${truncatedPlan}\n\`\`\``
            });

  terraform-apply:
    name: 'Terraform Apply'
    needs: [terraform-check, terraform-plan]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/IAC') && (github.event_name == 'push' || github.event.inputs.action == 'apply')
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Lambda Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: terraform/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/

      - name: Setup S3 Backend
        run: |
          echo "🚀 Setting up S3 backend for Terraform state..."
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Terraform Init
        run: |
          terraform init

      - name: Backup Current State Before Apply
        run: |
          echo "💾 Creating backup of current Terraform state before apply..."
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BACKUP_KEY="backups/pre-apply-terraform.tfstate.${TIMESTAMP}"
          
          # Check if state file exists in S3
          if aws s3api head-object --bucket text2agent-terraform-state-eu-west-2 \
             --key text2agent/production/terraform.tfstate \
             --region ${{ env.AWS_REGION }} 2>/dev/null; then
            
            echo "📁 Current state found, creating pre-apply backup..."
            aws s3 cp s3://text2agent-terraform-state-eu-west-2/text2agent/production/terraform.tfstate \
                      s3://text2agent-terraform-state-eu-west-2/${BACKUP_KEY} \
                      --region ${{ env.AWS_REGION }}
            
            echo "✅ Pre-apply state backed up to: s3://text2agent-terraform-state-eu-west-2/${BACKUP_KEY}"
            echo "PRE_APPLY_BACKUP_KEY=${BACKUP_KEY}" >> $GITHUB_ENV
            
            # Also create a "latest-backup" for easy reference
            aws s3 cp s3://text2agent-terraform-state-eu-west-2/text2agent/production/terraform.tfstate \
                      s3://text2agent-terraform-state-eu-west-2/backups/latest-pre-apply.tfstate \
                      --region ${{ env.AWS_REGION }}
            
            echo "📌 Latest backup also saved as: backups/latest-pre-apply.tfstate"
          else
            echo "ℹ️ No existing state found - this appears to be initial deployment"
            echo "PRE_APPLY_BACKUP_KEY=" >> $GITHUB_ENV
          fi

      - name: Fix Bedrock State Inconsistencies
        run: |
          echo "🔍 Checking for Bedrock state inconsistencies..."
          
          # Check if Knowledge Base was recreated but data source still in old state
          echo "Checking Bedrock resources in state..."
          KB_IN_STATE=$(terraform state list | grep "aws_bedrockagent_knowledge_base" || echo "")
          DS_IN_STATE=$(terraform state list | grep "aws_bedrockagent_data_source" || echo "")
          
          if [ -n "$KB_IN_STATE" ] && [ -n "$DS_IN_STATE" ]; then
            echo "Found both Knowledge Base and Data Source in state"
            
            # Get KB ID from state
            KB_ID=$(terraform state show module.ai.aws_bedrockagent_knowledge_base.main 2>/dev/null | grep "^[[:space:]]*id[[:space:]]*=" | cut -d'"' -f2 || echo "")
            DS_ID=$(terraform state show module.ai.aws_bedrockagent_data_source.s3_documents 2>/dev/null | grep "^[[:space:]]*id[[:space:]]*=" | cut -d'"' -f2 | cut -d',' -f1 || echo "")
            
            echo "Knowledge Base ID in state: $KB_ID"
            echo "Data Source ID in state: $DS_ID"
            
            if [ -n "$KB_ID" ] && [ -n "$DS_ID" ]; then
              # Check if the data source actually exists in AWS for this KB
              echo "Verifying data source exists in AWS..."
              DS_EXISTS=$(aws bedrock-agent get-data-source \
                --knowledge-base-id "$KB_ID" \
                --data-source-id "$DS_ID" \
                --region ${{ env.AWS_REGION }} \
                --query 'dataSource.dataSourceId' \
                --output text 2>/dev/null || echo "NOT_FOUND")
              
              if [ "$DS_EXISTS" = "NOT_FOUND" ]; then
                echo "🔧 Data source $DS_ID not found in Knowledge Base $KB_ID"
                echo "Removing orphaned data source from Terraform state..."
                terraform state rm module.ai.aws_bedrockagent_data_source.s3_documents || echo "⚠️ Could not remove from state"
                echo "✅ Orphaned data source removed - will be recreated during apply"
              else
                echo "✅ Data source exists and is correctly linked"
              fi
            fi
          else
            echo "ℹ️ No Bedrock state inconsistency detected"
          fi

      - name: Terraform Apply
        run: |
          echo "🚀 Applying complete infrastructure deployment..."
          
          # First attempt: Normal apply
          if ! terraform apply -auto-approve tfplan; then
            echo "⚠️ Initial apply failed - checking for Bedrock data source issues..."
            
            # Check if it's the specific Bedrock data source error
            LAST_ERROR=$(terraform apply -auto-approve tfplan 2>&1 | tail -10 || echo "")
            if echo "$LAST_ERROR" | grep -q "ResourceNotFoundException.*DataSource.*is not found"; then
              echo "🔧 Detected orphaned Bedrock data source - applying fix..."
              
              # Remove the problematic data source from state
              terraform state rm module.ai.aws_bedrockagent_data_source.s3_documents 2>/dev/null || echo "Could not remove from state"
              
              # Re-run terraform plan and apply to recreate the data source
              echo "Re-planning after state cleanup..."
              terraform plan -out=tfplan-fixed \
                -var="aws_region=${{ env.AWS_REGION }}" \
                -var="aws_profile="
              
              echo "Applying fixed plan..."
              terraform apply -auto-approve tfplan-fixed
              
              echo "✅ Infrastructure deployed with Bedrock data source recreated"
            else
              echo "❌ Different error encountered - failing deployment"
              exit 1
            fi
          else
            echo "✅ Complete infrastructure deployment successful"
          fi

      - name: Post-Apply State Backup
        if: success()
        run: |
          echo "💾 Creating post-apply state backup for rollback purposes..."
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          POST_APPLY_BACKUP_KEY="backups/post-apply-terraform.tfstate.${TIMESTAMP}"
          
          aws s3 cp s3://text2agent-terraform-state-eu-west-2/text2agent/production/terraform.tfstate \
                    s3://text2agent-terraform-state-eu-west-2/${POST_APPLY_BACKUP_KEY} \
                    --region ${{ env.AWS_REGION }}
          
          echo "✅ Post-apply state backed up to: s3://text2agent-terraform-state-eu-west-2/${POST_APPLY_BACKUP_KEY}"
          echo "📌 Backup created after successful apply for future reference"

      - name: Rollback on Failure
        if: failure() && env.PRE_APPLY_BACKUP_KEY != ''
        run: |
          echo "🔥 FAILURE DETECTED - Attempting to restore previous state..."
          echo "⚠️ This is an emergency rollback procedure"
          echo "Restoring state from: $PRE_APPLY_BACKUP_KEY"
          
          # Restore the previous state
          aws s3 cp s3://text2agent-terraform-state-eu-west-2/$PRE_APPLY_BACKUP_KEY \
                    s3://text2agent-terraform-state-eu-west-2/text2agent/production/terraform.tfstate \
                    --region ${{ env.AWS_REGION }}
          
          echo "⚠️ STATE RESTORED TO PRE-APPLY VERSION"
          echo "⚠️ Manual intervention may still be required to clean up partially created resources"
          echo "⚠️ Check AWS Console for orphaned resources"

      - name: Generate Outputs
        run: |
          terraform output -json > infrastructure-outputs.json
          echo "## 🚀 COMPLETE text2Agent Infrastructure Deployed! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ **FULL STACK DEPLOYED**:" >> $GITHUB_STEP_SUMMARY
          echo "- **🌐 VPC & Networking**: Private subnets, security groups" >> $GITHUB_STEP_SUMMARY
          echo "- **🗄️ Aurora PostgreSQL**: Cluster with serverless v2 scaling" >> $GITHUB_STEP_SUMMARY
          echo "- **🔐 Cognito Authentication**: User pool, client, domain" >> $GITHUB_STEP_SUMMARY
          echo "- **⚡ Lambda Functions**: Post-confirmation triggers" >> $GITHUB_STEP_SUMMARY
          echo "- **📦 S3 Storage**: Document bucket with encryption" >> $GITHUB_STEP_SUMMARY
          echo "- **🤖 Bedrock Knowledge Base**: AI-powered document search" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 **Infrastructure Details**:" >> $GITHUB_STEP_SUMMARY
          echo "- **VPC**: $(terraform output -raw vpc_id)" >> $GITHUB_STEP_SUMMARY
          echo "- **Aurora Cluster**: $(terraform output -raw aurora_cluster_id)" >> $GITHUB_STEP_SUMMARY
          echo "- **Aurora Database**: $(terraform output -raw aurora_database_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Aurora Endpoint**: $(terraform output -raw aurora_cluster_endpoint)" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: $(terraform output -raw s3_bucket_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Bedrock KB ID**: $(terraform output -raw bedrock_knowledge_base_id)" >> $GITHUB_STEP_SUMMARY
          echo "- **Bedrock KB ARN**: $(terraform output -raw bedrock_knowledge_base_arn)" >> $GITHUB_STEP_SUMMARY
          echo "- **Data Source ID**: $(terraform output -raw bedrock_data_source_id)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 **Authentication & Lambda**:" >> $GITHUB_STEP_SUMMARY
          echo "- **Cognito User Pool**: $(terraform output -raw cognito_user_pool_id)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cognito Client**: $(terraform output -raw cognito_user_pool_client_id)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cognito Domain**: $(terraform output -raw cognito_user_pool_domain)" >> $GITHUB_STEP_SUMMARY
          echo "- **Post Confirmation Lambda**: $(terraform output -raw post_confirmation_lambda_name)" >> $GITHUB_STEP_SUMMARY
          echo "- **Lambda Role**: $(terraform output -raw lambda_role_arn)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 **Deployment Status**: ✅ PRODUCTION READY" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $(terraform output -raw environment)" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: $(terraform output -raw aws_region)" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: $(terraform output -raw project_name)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 **Architecture**: Complete AI-Powered Platform" >> $GITHUB_STEP_SUMMARY
          echo "Ready for document ingestion, user authentication, and AI-powered search!" >> $GITHUB_STEP_SUMMARY

      - name: Upload Infrastructure Outputs
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-outputs
          path: terraform/infrastructure-outputs.json
          retention-days: 30

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup S3 Backend
        run: |
          echo "🚀 Setting up S3 backend for Terraform state..."
          chmod +x ./setup_terraform_backend.sh
          ./setup_terraform_backend.sh

      - name: Terraform Init
        run: |
          terraform init

      - name: Verify State and Resources
        run: |
          echo "🔍 Checking Terraform state and AWS resources..."
          echo "Current state resources:"
          RESOURCES=$(terraform state list)
          if [ -z "$RESOURCES" ]; then
            echo "❌ ERROR: No resources found in Terraform state!"
            echo "This could mean:"
            echo "  - Infrastructure was already destroyed"
            echo "  - State file is missing or corrupted"
            echo "  - Wrong backend configuration"
            exit 1
          else
            echo "$RESOURCES"
          fi
          
          echo ""
          echo "Verifying state shows resources to destroy:"
          terraform show || echo "⚠️ No state data"
          
          echo ""
          echo "Planning destroy to see what will be removed:"
          terraform plan -destroy -var="aws_region=${{ env.AWS_REGION }}" -var="aws_profile=" | head -50

      - name: Terraform Destroy
        run: |
          echo "💥 Starting infrastructure destruction..."
          echo "Creating destroy plan..."
          terraform plan -destroy -out=destroy-plan -var="aws_region=${{ env.AWS_REGION }}" -var="aws_profile="
          
          echo ""
          echo "Applying destroy plan..."
          terraform apply -auto-approve destroy-plan
          
          echo ""
          echo "✅ Infrastructure destroyed successfully"

      - name: Verify Destruction
        run: |
          echo "🔍 Verifying destruction completed..."
          terraform state list || echo "✅ State is empty - all resources destroyed"
          
          echo ""
          echo "Checking for Lambda functions..."
          aws lambda list-functions --query 'Functions[?starts_with(FunctionName, `text2Agent`)].FunctionName' --output table || echo "No Lambda functions found"
          
          echo ""
          echo "Checking for S3 buckets..."
          aws s3 ls | grep -E "(text2agent|str-data-store)" || echo "No project S3 buckets found"
          
          echo ""
          echo "Checking for Aurora clusters..."
          aws rds describe-db-clusters --query 'DBClusters[?starts_with(DBClusterIdentifier, `str-kb`)].DBClusterIdentifier' --output table || echo "No Aurora clusters found"
          
          echo ""
          echo "Checking for Cognito User Pools..."
          aws cognito-idp list-user-pools --max-items 60 --query 'UserPools[?contains(Name, `text2agent`)].Name' --output table || echo "No Cognito User Pools found"
          
          echo ""
          echo "Checking for Bedrock Knowledge Bases..."
          aws bedrock-agent list-knowledge-bases --query 'knowledgeBaseSummaries[?contains(name, `text2agent`)].name' --output table || echo "No Bedrock Knowledge Bases found"

      - name: Destroy Summary
        run: |
          echo "## 💥 COMPLETE text2Agent Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "✅ All infrastructure resources have been removed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Terraform state is clean" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🗑️ **Infrastructure Destroyed**:" >> $GITHUB_STEP_SUMMARY
          echo "- **🌐 VPC & Networking**: VPC, subnets, security groups" >> $GITHUB_STEP_SUMMARY
          echo "- **🗄️ Aurora PostgreSQL**: Cluster, instance, database" >> $GITHUB_STEP_SUMMARY
          echo "- **🔐 Authentication**: Cognito User Pool, client, domain" >> $GITHUB_STEP_SUMMARY
          echo "- **⚡ Lambda Functions**: Post-confirmation function, layers, roles" >> $GITHUB_STEP_SUMMARY
          echo "- **📦 S3 Storage**: Document bucket with all configurations" >> $GITHUB_STEP_SUMMARY
          echo "- **🤖 Bedrock Knowledge Base**: AI knowledge base and data sources" >> $GITHUB_STEP_SUMMARY
          echo "- **🔒 IAM Resources**: Roles, policies, permissions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 **Cleanup Status**: ✅ COMPLETE" >> $GITHUB_STEP_SUMMARY
          echo "All AWS resources have been safely removed from your account." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 **Ready for Redeployment**" >> $GITHUB_STEP_SUMMARY
          echo "Infrastructure can be redeployed at any time using this workflow." >> $GITHUB_STEP_SUMMARY