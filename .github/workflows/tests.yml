name: Test All Components

on:
  push:
    branches: [ Staging ]
  pull_request:
    branches: [ Staging ]

jobs:
  tests:
    runs-on: ubuntu-latest
    name: "Full Test Suite (With Secrets)"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-mock

      - name: Setup Docker (for MCP tests)
        run: |
          echo "🐳 Setting up Docker for MCP tests..."
          
          # Docker is pre-installed on GitHub Actions runners
          docker --version
          docker info
          
          # Ensure Docker service is running
          sudo systemctl start docker || echo "Docker already running"
          
          # Test Docker functionality
          docker run --rm hello-world
          
          echo "✅ Docker is ready for MCP tests"

      - name: Run MCP Tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "🔧 Running MCP (Model Context Protocol) Tests..."
          echo "🐳 Docker availability check:"
          docker --version || echo "Docker not available in CI"
          echo "🔍 MCP Config check:"
          echo "MCP directory: $(ls -la MCP/ | head -5)"
          echo "MCP Config: $(ls -la MCP/Config/ | head -5)"
          echo "Testing MCP configuration imports:"
          python -c "import sys; sys.path.insert(0, '.'); from MCP.Config.mcp_config import mcp_config; print('✅ MCP config import successful')" || echo "❌ MCP config import failed"
          echo "🧪 Running MCP tests (with real Docker integration when available):"
          python -m pytest Tests/MCP/ -v --tb=short -s

      - name: Run Skeleton Workflow Tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "🧪 Running Skeleton Workflow Tests..."
          echo "🔍 Debugging Python environment:"
          echo "PYTHONPATH: $PYTHONPATH"
          echo "Current directory: $(pwd)"
          echo "Python version: $(python --version)"
          echo "File structure check:"
          ls -la Logs/ | head -5
          ls -la utils/ | head -5
          ls -la Global/Architect/ | head -5
          echo "Testing imports:"
          python -c "import sys; sys.path.insert(0, '.'); print('Python path entries:'); [print(f'  {p}') for p in sys.path[:8]]"
          python -c "import sys; sys.path.insert(0, '.'); from utils.core import get_tenant_domain_by_email; print('✅ utils.core import successful')" || echo "❌ utils.core import failed"
          python -c "import sys; sys.path.insert(0, '.'); from Logs.log_manager import LogManager; print('✅ Logs.log_manager import successful')" || echo "❌ Logs.log_manager import failed"
          python -c "import sys; sys.path.insert(0, '.'); from Global.Architect.skeleton import run_skeleton; print('✅ skeleton import successful')" || echo "❌ skeleton import failed"
          echo "🧪 Running actual tests:"
          python -m pytest Tests/skeleton/test.py -v --tb=short -s

      - name: Run Prompt Warehouse Tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "📝 Running Prompt Warehouse Tests..."
          echo "🔍 Validating prompt structure:"
          echo "Prompts directory: $(ls -la Prompts/ | head -5)"
          echo "Test prompts directory: $(ls -la Tests/prompts/ | head -5)"
          echo "Testing prompt warehouse imports:"
          python -c "import sys; sys.path.insert(0, '.'); from Prompts.promptwarehouse import PromptWarehouse; print('✅ PromptWarehouse import successful')" || echo "❌ PromptWarehouse import failed"
          echo "🧪 Running prompt warehouse tests:"
          python -m pytest Tests/prompts/ -v --tb=short -s

      - name: Run Collector Tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "🤖 Running Collector Agent Tests..."
          echo "🔍 Validating collector structure:"
          echo "Global/Collector directory: $(ls -la Global/Collector/ | head -5)"
          echo "Tests/collector directory: $(ls -la Tests/collector/ | head -5)"
          echo "Testing collector imports:"
          python -c "import sys; sys.path.insert(0, '.'); from Global.Collector.agent import Collector; print('✅ Collector import successful')" || echo "❌ Collector import failed"
          echo "🧪 Running collector tests (mix of real and mocked):"
          python -m pytest Tests/collector/test.py -v --tb=short -s

      - name: Run Colleagues Tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "👥 Running Colleagues Component Tests..."
          echo "🔍 Validating colleagues structure:"
          echo "Global/Components directory: $(ls -la Global/Components/ | head -5)"
          echo "Tests/colleagues directory: $(ls -la Tests/colleagues/ | head -5)"
          echo "Testing colleagues imports:"
          python -c "import sys; sys.path.insert(0, '.'); from Global.Components.colleagues import Colleague; print('✅ Colleagues import successful')" || echo "❌ Colleagues import failed"
          echo "🧪 Running colleagues tests (real LLM integration):"
          python -m pytest Tests/colleagues/test.py -v --tb=short -s

      - name: Run STR Tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "🔍 Running STR Component Tests..."
          echo "🔍 Validating STR structure:"
          echo "Global/Components directory: $(ls -la Global/Components/ | head -5)"
          echo "Tests/str directory: $(ls -la Tests/str/ | head -5)"
          echo "Testing STR imports:"
          python -c "import sys; sys.path.insert(0, '.'); from Global.Components.STR import STR; print('✅ STR import successful')" || echo "❌ STR import failed"
          echo "🧪 Running STR tests (real AWS Bedrock integration):"
          python -m pytest Tests/str/test.py -v --tb=short -s

      - name: Test Summary
        run: |
          echo "📊 Test Summary:"
          echo "✅ Configuration validation: Passed"
          echo "🔧 MCP tests: Completed (with Docker support)"
          echo "🧪 Skeleton tests: Completed (real workflow execution)"
          echo "📝 Prompt Warehouse tests: Completed (AWS Bedrock integration)"
          echo "🤖 Collector tests: Completed (real LLM integration)"
          echo "👥 Colleagues tests: Completed (real multi-agent analysis)"
          echo "🔍 STR tests: Completed (real AWS knowledge base queries)"
          echo ""
          echo "🎯 Test Coverage:"
          echo "   • Docker-based MCP servers"
          echo "   • Microsoft Graph API integration"
          echo "   • Chart and PDF generation"
          echo "   • Real workflow execution"
          echo "   • MCP server connectivity"
          echo "   • Prompt warehouse & AWS Bedrock"
          echo "   • AWS profile fallback handling"
          echo "   • Real prompt file validation (9 prompts)"
          echo "   • Collector agent with real LLM calls"
          echo "   • Task expansion and feedback generation"
          echo "   • Connector validation and tool loading"
          echo "   • Multi-colleague analysis with real LLM"
          echo "   • AI judgment and scoring systems"
          echo "   • Knowledge base retrieval with AWS Bedrock"
          echo "   • Session-based query continuity"
          echo "   • Real task formatting and expansion"
          echo ""  
          echo "🚀 All tests completed successfully!"

  basic-validation:
    runs-on: ubuntu-latest
    name: "Basic Validation (No Secrets)"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-mock

      - name: Run Configuration Tests Only
        run: |
          echo "🔍 Running basic configuration and structure validation..."
          echo "PYTHONPATH=${{ github.workspace }}" >> "$GITHUB_ENV"
          python -m pytest Tests/MCP/test.py::TestMCPConfiguration -v
          python -m pytest Tests/MCP/test.py::test_mcp_directory_structure -v
          python -m pytest Tests/MCP/test.py::test_config_json_validity -v
          python -m pytest Tests/MCP/test.py::TestDockerMCPServers::test_docker_availability -v
          
          echo "📝 Running basic prompt warehouse validation..."
          python -m pytest Tests/prompts/test_promptwarehouse.py::TestPromptWarehouseIntegration::test_promptwarehouse_file_exists -v
          python -m pytest Tests/prompts/test_promptwarehouse.py::TestPromptWarehouseIntegration::test_real_prompt_files_structure -v
          
          echo "🤖 Running basic collector validation..."
          python -m pytest Tests/collector/test.py::TestCollector::test_collector_initialization -v
          python -m pytest Tests/collector/test.py::TestCollector::test_format_connectors -v
          python -m pytest Tests/collector/test.py::TestCollector::test_format_tools -v
          
          echo "👥 Running basic colleagues validation..."
          python -m pytest Tests/colleagues/test.py::TestColleagueComponent::test_colleague_initialization -v
          python -m pytest Tests/colleagues/test.py::TestColleagueComponent::test_threshold_behavior -v
          python -m pytest Tests/colleagues/test.py::TestColleaguePydanticModels::test_analysis_response_model -v
          
          echo "🔍 Running basic STR validation..."
          python -m pytest Tests/str/test.py::TestSTRComponent::test_str_initialization -v
          python -m pytest Tests/str/test.py::TestSTRComponent::test_aws_session_configuration -v
          python -m pytest Tests/str/test.py::TestSTRPydanticModels::test_format_response_model -v

      - name: Validate Directory Structure
        run: |
          echo "📁 Validating project structure..."
          required_dirs=("Tests/skeleton" "Tests/MCP" "Tests/prompts" "Tests/collector" "Tests/colleagues" "Tests/str" "MCP/Config" "Global/Architect" "Global/Components" "Tools" "Prompts")
          
          for dir in "${required_dirs[@]}"; do
              if [ -d "$dir" ]; then
                  echo "✅ $dir exists"
              else
                  echo "❌ $dir missing"
                  exit 1
              fi
          done
          
          echo "📝 Validating prompt warehouse structure..."
          prompt_files=("Prompts/promptwarehouse.py" "Tests/prompts/test_promptwarehouse.py" "Tests/prompts/test_prompt_integration.py")
          
          for file in "${prompt_files[@]}"; do
              if [ -f "$file" ]; then
                  echo "✅ $file exists"
              else
                  echo "❌ $file missing"
                  exit 1
              fi
          done
          
          echo "🔍 Checking real prompt files..."
          prompt_dirs=("Prompts/collector" "Prompts/STR" "Prompts/poolOfColleagues" "Prompts/task_expansion")
          
          for dir in "${prompt_dirs[@]}"; do
              if [ -f "$dir/prompt.py" ]; then
                  echo "✅ $dir/prompt.py exists"
              else
                  echo "⚠️  $dir/prompt.py not found (optional)"
              fi
          done
          
          echo "🎉 Project structure validation passed!" 