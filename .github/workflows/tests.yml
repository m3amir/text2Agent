name: Complete Test Suite

on:
  push:
    branches:
      - Staging
  pull_request:
    branches:
      - Staging

jobs:
  full-integration-tests:
    runs-on: ubuntu-latest
    name: "Full Integration Tests"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Node.js (for MCP servers)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Set up Docker for MCP servers
        run: |
          echo "üê≥ Setting up Docker for MCP servers..."
          docker --version
          docker info
          
          # Pre-pull common Docker images
          docker pull hello-world || echo "‚ö†Ô∏è  Could not pre-pull hello-world image"
          
          # Test basic Docker functionality
          docker run --rm hello-world
          echo "‚úÖ Docker is working correctly"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-mock

      - name: Set up environment variables
        env:
          # Microsoft Graph API (optional)
          MICROSOFT_TENANT_ID: ${{ secrets.MICROSOFT_TENANT_ID }}
          MICROSOFT_CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID }}
          MICROSOFT_CLIENT_SECRET: ${{ secrets.MICROSOFT_CLIENT_SECRET }}
          MICROSOFT_SITE_URL: ${{ secrets.MICROSOFT_SITE_URL }}
          MICROSOFT_EMAIL: ${{ secrets.MICROSOFT_EMAIL }}
          # AWS credentials for real testing
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "PYTHONPATH=${{ github.workspace }}" >> "$GITHUB_ENV"
          
          # Set Microsoft credentials if available
          if [ -n "$MICROSOFT_TENANT_ID" ]; then
            {
              echo "MICROSOFT_TENANT_ID=$MICROSOFT_TENANT_ID"
              echo "MICROSOFT_CLIENT_ID=$MICROSOFT_CLIENT_ID"
              echo "MICROSOFT_CLIENT_SECRET=$MICROSOFT_CLIENT_SECRET"
              echo "MICROSOFT_SITE_URL=$MICROSOFT_SITE_URL"
              echo "MICROSOFT_EMAIL=$MICROSOFT_EMAIL"
            } >> "$GITHUB_ENV"
            echo "‚úÖ Microsoft Graph API credentials available"
          else
            echo "‚ö†Ô∏è  Microsoft credentials not available - tests will run in limited mode"
          fi
          
          # Set AWS credentials if available
          if [ -n "$AWS_ACCESS_KEY_ID" ]; then
            {
              echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
              echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
              echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION"
            } >> "$GITHUB_ENV"
            echo "‚úÖ AWS credentials available for real testing"
          else
            echo "‚ö†Ô∏è  AWS credentials not available - some tests may be limited"
          fi
          


      - name: Pre-install MCP dependencies
        run: |
          echo "üì¶ Pre-installing MCP server dependencies..."
          npx -y @antv/mcp-server-chart --version || echo "Chart MCP server check complete"

      - name: Create required directories
        run: |
          mkdir -p Charts Reports Logs
          chmod 755 Charts Reports Logs

      - name: Validate Configuration
        run: |
          echo "üîç Validating configuration files..."
          python -c "
          import json
          import os
          
          config_files = [
              'MCP/Config/mcp_servers_config.json',
              'MCP/Config/config.json'
          ]
          
          for config_file in config_files:
              if os.path.exists(config_file):
                  try:
                      with open(config_file, 'r') as f:
                          config = json.load(f)
                      print(f'‚úÖ {config_file} is valid JSON')
                      if 'local' in config:
                          print(f'   üìã Found {len(config[\"local\"])} local tools')
                      if 'mcpServers' in config:
                          print(f'   üîß Found {len(config[\"mcpServers\"])} MCP servers')
                  except json.JSONDecodeError as e:
                      print(f'‚ùå {config_file} has invalid JSON: {e}')
                      exit(1)
              else:
                  print(f'‚ö†Ô∏è  {config_file} not found')
          "

      - name: Run MCP Tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "üîß Running MCP Tests (with Docker and credentials support)..."
          python -m pytest Tests/MCP/test.py -v --tb=short -s

      - name: Run Skeleton Tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "üß™ Running Skeleton Workflow Tests..."
          echo "üîç Debugging Python environment:"
          echo "PYTHONPATH: $PYTHONPATH"
          echo "Current directory: $(pwd)"
          echo "Python version: $(python --version)"
          echo "File structure check:"
          ls -la Logs/ | head -5
          ls -la utils/ | head -5
          ls -la Global/Architect/ | head -5
          echo "Testing imports:"
          python -c "import sys; sys.path.insert(0, '.'); print('Python path entries:'); [print(f'  {p}') for p in sys.path[:8]]"
          python -c "import sys; sys.path.insert(0, '.'); from utils.core import get_tenant_domain_by_email; print('‚úÖ utils.core import successful')" || echo "‚ùå utils.core import failed"
          python -c "import sys; sys.path.insert(0, '.'); from Logs.log_manager import LogManager; print('‚úÖ Logs.log_manager import successful')" || echo "‚ùå Logs.log_manager import failed"
          python -c "import sys; sys.path.insert(0, '.'); from Global.Architect.skeleton import run_skeleton; print('‚úÖ skeleton import successful')" || echo "‚ùå skeleton import failed"
          echo "üß™ Running actual tests:"
          python -m pytest Tests/skeleton/test.py -v --tb=short -s

      - name: Run Prompt Warehouse Tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "üìù Running Prompt Warehouse Tests..."
          echo "üîç Validating prompt structure:"
          echo "Prompts directory: $(ls -la Prompts/ | head -5)"
          echo "Test prompts directory: $(ls -la Tests/prompts/ | head -5)"
          echo "Testing prompt warehouse imports:"
          python -c "import sys; sys.path.insert(0, '.'); from Prompts.promptwarehouse import PromptWarehouse; print('‚úÖ PromptWarehouse import successful')" || echo "‚ùå PromptWarehouse import failed"
          echo "üß™ Running prompt warehouse tests:"
          python -m pytest Tests/prompts/ -v --tb=short -s

      - name: Run Collector Tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "ü§ñ Running Collector Agent Tests..."
          echo "üîç Validating collector structure:"
          echo "Global/Collector directory: $(ls -la Global/Collector/ | head -5)"
          echo "Tests/collector directory: $(ls -la Tests/collector/ | head -5)"
          echo "Testing collector imports:"
          python -c "import sys; sys.path.insert(0, '.'); from Global.Collector.agent import Collector; print('‚úÖ Collector import successful')" || echo "‚ùå Collector import failed"
          echo "üß™ Running collector tests (mix of real and mocked):"
          python -m pytest Tests/collector/test.py -v --tb=short -s

      - name: Run Complete Test Suite
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "üìä Running complete test suite..."
          python -m pytest Tests/MCP/test.py Tests/skeleton/test.py Tests/prompts/ Tests/collector/test.py -v --tb=short
        continue-on-error: true

      - name: Test Summary
        run: |
          echo "üìä Test Summary:"
          echo "‚úÖ Configuration validation: Passed"
          echo "üîß MCP tests: Completed (with Docker support)"
          echo "üß™ Skeleton tests: Completed (real workflow execution)"
          echo "üìù Prompt Warehouse tests: Completed (AWS Bedrock integration)"
          echo "ü§ñ Collector tests: Completed (real LLM integration)"
          echo ""
          echo "üéØ Test Coverage:"
          echo "   ‚Ä¢ Docker-based MCP servers"
          echo "   ‚Ä¢ Microsoft Graph API integration"
          echo "   ‚Ä¢ Chart and PDF generation"
          echo "   ‚Ä¢ Real workflow execution"
          echo "   ‚Ä¢ MCP server connectivity"
          echo "   ‚Ä¢ Prompt warehouse & AWS Bedrock"
          echo "   ‚Ä¢ AWS profile fallback handling"
          echo "   ‚Ä¢ Real prompt file validation (9 prompts)"
          echo "   ‚Ä¢ Collector agent with real LLM calls"
          echo "   ‚Ä¢ Task expansion and feedback generation"
          echo "   ‚Ä¢ Connector validation and tool loading"
          echo ""  
          echo "üöÄ All tests completed successfully!"

  basic-validation:
    runs-on: ubuntu-latest
    name: "Basic Validation (No Secrets)"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-mock

      - name: Run Configuration Tests Only
        run: |
          echo "üîç Running basic configuration and structure validation..."
          echo "PYTHONPATH=${{ github.workspace }}" >> "$GITHUB_ENV"
          python -m pytest Tests/MCP/test.py::TestMCPConfiguration -v
          python -m pytest Tests/MCP/test.py::test_mcp_directory_structure -v
          python -m pytest Tests/MCP/test.py::test_config_json_validity -v
          python -m pytest Tests/MCP/test.py::TestDockerMCPServers::test_docker_availability -v
          
          echo "üìù Running basic prompt warehouse validation..."
          python -m pytest Tests/prompts/test_promptwarehouse.py::TestPromptWarehouseIntegration::test_promptwarehouse_file_exists -v
          python -m pytest Tests/prompts/test_promptwarehouse.py::TestPromptWarehouseIntegration::test_real_prompt_files_structure -v
          
          echo "ü§ñ Running basic collector validation..."
          python -m pytest Tests/collector/test.py::TestCollector::test_collector_initialization -v
          python -m pytest Tests/collector/test.py::TestCollector::test_format_connectors -v
          python -m pytest Tests/collector/test.py::TestCollector::test_format_tools -v

      - name: Validate Directory Structure
        run: |
          echo "üìÅ Validating project structure..."
          required_dirs=("Tests/skeleton" "Tests/MCP" "Tests/prompts" "MCP/Config" "Global/Architect" "Tools" "Prompts")
          
          for dir in "${required_dirs[@]}"; do
              if [ -d "$dir" ]; then
                  echo "‚úÖ $dir exists"
              else
                  echo "‚ùå $dir missing"
                  exit 1
              fi
          done
          
          echo "üìù Validating prompt warehouse structure..."
          prompt_files=("Prompts/promptwarehouse.py" "Tests/prompts/test_promptwarehouse.py" "Tests/prompts/test_prompt_integration.py")
          
          for file in "${prompt_files[@]}"; do
              if [ -f "$file" ]; then
                  echo "‚úÖ $file exists"
              else
                  echo "‚ùå $file missing"
                  exit 1
              fi
          done
          
          echo "üîç Checking real prompt files..."
          prompt_dirs=("Prompts/collector" "Prompts/STR" "Prompts/poolOfColleagues" "Prompts/task_expansion")
          
          for dir in "${prompt_dirs[@]}"; do
              if [ -f "$dir/prompt.py" ]; then
                  echo "‚úÖ $dir/prompt.py exists"
              else
                  echo "‚ö†Ô∏è  $dir/prompt.py not found (optional)"
              fi
          done
          
          echo "üéâ Project structure validation passed!" 