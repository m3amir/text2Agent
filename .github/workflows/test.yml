name: Run Tests

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-mock

      - name: Set up environment variables
        run: |
          echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Run Skeleton Tests
        run: |
          echo "🧪 Running Skeleton Workflow Tests..."
          python -m pytest Tests/skeleton/ -v --tb=short
        continue-on-error: false

      - name: Run MCP Tests
        run: |
          echo "🔧 Running MCP Tests..."
          python -m pytest Tests/MCP/ -v --tb=short
        continue-on-error: false

      - name: Run All Tests with Coverage (Optional)
        run: |
          echo "📊 Running all tests together..."
          python -m pytest Tests/ -v --tb=short
        continue-on-error: true

      - name: Test Summary
        run: |
          echo "✅ All tests completed!"
          echo "🏗️  Skeleton tests: Tests real workflow execution"
          echo "🔧 MCP tests: Tests real MCP server and tools"

  test-individual-components:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [skeleton, MCP]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-mock

      - name: Set up environment
        run: |
          echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Run ${{ matrix.test-suite }} tests
        run: |
          echo "🧪 Running ${{ matrix.test-suite }} tests..."
          python -m pytest Tests/${{ matrix.test-suite }}/ -v --tb=short

  validate-configuration:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Validate JSON configs
        run: |
          echo "🔍 Validating JSON configuration files..."
          python -c "
          import json
          import os
          
          config_files = [
              'MCP/Config/mcp_servers_config.json',
              'MCP/Config/config.json'
          ]
          
          for config_file in config_files:
              if os.path.exists(config_file):
                  try:
                      with open(config_file, 'r') as f:
                          json.load(f)
                      print(f'✅ {config_file} is valid JSON')
                  except json.JSONDecodeError as e:
                      print(f'❌ {config_file} has invalid JSON: {e}')
                      exit(1)
              else:
                  print(f'⚠️  {config_file} not found')
          
          print('🎉 All configuration files validated!')
          "

      - name: Check required directories
        run: |
          echo "📁 Checking directory structure..."
          required_dirs=("Tests/skeleton" "Tests/MCP" "MCP/Config" "Global/Architect" "Tools")
          
          for dir in "${required_dirs[@]}"; do
              if [ -d "$dir" ]; then
                  echo "✅ $dir exists"
              else
                  echo "❌ $dir missing"
                  exit 1
              fi
          done
          
          echo "🎉 All required directories found!"

      - name: Verify test files exist
        run: |
          echo "🧪 Checking test files..."
          test_files=("Tests/skeleton/conftest.py" "Tests/MCP/test.py")
          
          for file in "${test_files[@]}"; do
              if [ -f "$file" ]; then
                  echo "✅ $file exists"
              else
                  echo "❌ $file missing"
                  exit 1
              fi
          done
          
          echo "🎉 All test files found!" 